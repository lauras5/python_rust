:::Back to Basics:::

1. strings are wild
    --- invalid rust ---
    fn print(input: str) {
        println!("{}", input);
    }
    fn main() {
        print("hello world");
    }

    ------> errors out w/
    error[E077]: the size for values of type 'str' cannot be known
    at compilation time

    - compiled --> stores vars in the stack
    - running --> stores data in heap

    cannot determine str size during compilation so doesn't know how
    much memory to allocate, can't pass "string slices", need string literal

    fn print(input: String) {
        println!("{}", input);
    }
    fn main() {
        let string_literal = "hello world";
        print(string_literal.to_string());
    }

    --- borrowing & making reference to string literal & pass as reference ---
    fn print(input_string: &str) {
        println("{}", input_string);
    }
    fn main() {
        let test_string = &"Hello, World!";
        print(test_string);
    }

2. floats and ints
    - typing needs to be consistent, annoying but maintains safety

    --- Don't do this ---
    result = 1 + 2.2
    result = result + 3.3
    ------> float can't be added to int, also not mutable (rust assumes all vars immutable)

    --- Do this ---
    let mut result = 1.0 + 2.2
    result = result + 3.3

    signed vs unsigned:
     - just confirm range needed before assigning

3. vectors and arrays
    --- looping through array in rust ---
    let array: [i32; 3] = [1, 2, 3];
    println!("array has {} elements", array.len());
    for i in array.iter() {
        println("{}", i);
    }

    --- structs & traits in later chapters ---
    - vectors are on heap and expandable, ! == macro
    let mut str_vector: Vec<&str> = vec!["one", "two", "three"];
    println("{}", str_vector.len();
    str_vector.push("four");
    for i in str_vector.iter() {
        println!("{}", i);
    }

    --- output ---
    3
    one
    two
    three
    four

4. replacing dictionaries w/ hashmaps
    - enums
    - hashmap that accepts strings and integers

    --- defining Enum ---
    enum Value {
        Str(&'static str),      // static lifetime, for rest of program's lifetime
        Int(i32),
    }

    --- create mutable hashmap ---
    use std::collections::HashMap;
    let mut map = HashMap::new();

    --- insert into hashmap ---
    map.insert("one", Value::Str("1"));
    map.insert("two", Value::Int(2));

    --- remember strongly typed, need to handle all cases or won't compile ---
    for (_key, value) in &map {
        match value {
            Value::Str(inside_value) => {
                println!("the following value is a str: {}", inside_value);
            }
            Value::Int(inside_value) => {
                println!("the following value is an int: {}", inside_value);
            }
        }
    }

    --- some & none ---
    --- match for items not in hashmap ---
    fn process_enum(value: &Value) -> () {
        match value {
            Value::Str(inside_value) => {
                println!("the following value is a str: {}", inside_value);
            }
            Value::Int(inside_value) => {
                println!("the following value is an int: {}", inside_value);
            }
        }
    }

    --- new get function ---
    match map.get("test") {
        Some(inside_value) => {
            process_enum(inside_value);
        }
        None => {
            println!("there is no value");
        }
    }

5. Handling errors
    - python has try/except blocks --> rust has ok/err
    fn check_int_above_threshold(threshold: i3, get_result: Option<&Value>) -> Result<bool, &'static str> {
        match get_result {
            Some(inside_value) => {
                match inside_value {
                    Value::Str(_) => return Err("str value was supplied as opposed to an int which is needed"),
                    Value::Int(int_value) => {
                        if int_value > &threshold {
                            return Ok(true)
                        }
                        return Ok(false)
                    }
                }
            }
            None => return Err("no value was supplied to be checked")
        }
    }

    --- implement fn ---
    let result: Option<&Value> = map.get("two");
    let above_threshold: bool = check_int_above_threshold(1, result).unwrap();
    println!("it is {} that the threshold is breached", above_threshold);
    --- output ---
    it is true that the threshold is breached
    ** edit call to see diff messages

6. ownership
    - memory save w/o garbage collector <3
    - keeps resources low and speed high
    COPY
        let x = 5;
        let y = x;
        - int: bind value to x, make copy of x and bind to y
        ** strings go out of scope, avoid double free
        let s1 = String::from("hello");
        let s2 = s1;
        ----> outputs
        error[E0382]: borrow of moved value: `s1`
    MOVE
        ** first var no longer owns the value
        let one: String = String::from("one");
        let two: String = one + " two";

        ---> value borrowed after move when trying to output 'one'
        --- instead do ---
        let two: String = one.to_owned() + " two";
    Immutable Borrow
        value borrowing value doesn't have ownership
        **check example code**
    Mutable borrow
        locked until borrower releases it since it might change value

metaprogramming w/ macros...
